/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type S3PolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type S3PolicyParameters struct {

	// The policy document. This is a JSON formatted string.
	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Service name of the resource representing the ID of the cloud project.
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// The user ID
	// +crossplane:generate:reference:type=ProjectUser
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

// S3PolicySpec defines the desired state of S3Policy
type S3PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     S3PolicyParameters `json:"forProvider"`
}

// S3PolicyStatus defines the observed state of S3Policy.
type S3PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        S3PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3Policy is the Schema for the S3Policys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovhjet}
type S3Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3PolicySpec   `json:"spec"`
	Status            S3PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3PolicyList contains a list of S3Policys
type S3PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3Policy `json:"items"`
}

// Repository type metadata.
var (
	S3Policy_Kind             = "S3Policy"
	S3Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: S3Policy_Kind}.String()
	S3Policy_KindAPIVersion   = S3Policy_Kind + "." + CRDGroupVersion.String()
	S3Policy_GroupVersionKind = CRDGroupVersion.WithKind(S3Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&S3Policy{}, &S3PolicyList{})
}
