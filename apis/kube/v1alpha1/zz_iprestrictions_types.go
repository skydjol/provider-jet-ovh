/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpRestrictionsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IpRestrictionsParameters struct {

	// List of IP restrictions for the cluster
	// +kubebuilder:validation:Required
	Ips []*string `json:"ips" tf:"ips,omitempty"`

	// Kube ID
	// +crossplane:generate:reference:type=ProjectKube
	// +kubebuilder:validation:Optional
	KubeID *string `json:"kubeId,omitempty" tf:"kube_id,omitempty"`

	// +kubebuilder:validation:Optional
	KubeIDRef *v1.Reference `json:"kubeIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KubeIDSelector *v1.Selector `json:"kubeIdSelector,omitempty" tf:"-"`

	// Service name
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

// IpRestrictionsSpec defines the desired state of IpRestrictions
type IpRestrictionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpRestrictionsParameters `json:"forProvider"`
}

// IpRestrictionsStatus defines the observed state of IpRestrictions.
type IpRestrictionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpRestrictionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpRestrictions is the Schema for the IpRestrictionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovhjet}
type IpRestrictions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpRestrictionsSpec   `json:"spec"`
	Status            IpRestrictionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpRestrictionsList contains a list of IpRestrictionss
type IpRestrictionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpRestrictions `json:"items"`
}

// Repository type metadata.
var (
	IpRestrictions_Kind             = "IpRestrictions"
	IpRestrictions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpRestrictions_Kind}.String()
	IpRestrictions_KindAPIVersion   = IpRestrictions_Kind + "." + CRDGroupVersion.String()
	IpRestrictions_GroupVersionKind = CRDGroupVersion.WithKind(IpRestrictions_Kind)
)

func init() {
	SchemeBuilder.Register(&IpRestrictions{}, &IpRestrictionsList{})
}
